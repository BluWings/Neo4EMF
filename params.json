{"name":"NEO4EMF","tagline":"EMF, NEO4J, Model repository","body":"##Presentation\r\n\r\nOne of the main limitations hampering the adoption of modeling technologies for large-scale systems is the lack of solutions to efficiently handle big, complex and highly interconnected data models. This project introduces NEO4EMF, a Neo4j-based model repository and persistence framework allowing on-demand loading, storage, and unloading of large-scale EMF models. Neo4EMF uses a sophisticated unloading approach apart from simple Soft/Weak references. Moreover, Neo4EMF provides a No-SQL database persistence framework based on Neo4j, which is a transactional property-graph database that proved a remarkable running speed for connected data operations compared to relational databases.\r\n\r\nIn terms of performance, Neo4EMF eases data access and storage not only in a manner to reduce time and memory usage but also to allow big models to fit into small memory. This is established through an on-demand loading mechanism that is analogous to CDO but with a few differences:\r\n\r\n1. Lightweight first time loading of model elements: we separated EMF objects and their data fields, thus, data objects are only instantiated if an access request to one of their fields is established\r\n2. Static and dynamic partitioning of model elements: a partition represents a group of model elements to be unloaded all together. Hence, after each EMF operation call, first time loading objects are organized in their suitable partition according to the partitioning strategy.\r\n3. Unloading of partitions: when memory reaches a given threshold, we use a selection strategy to choose one or more partitions to be removed from the memory.\r\n\r\nWe adapted the EMF java code generation templates for a refined on-demand loading mechanism, we separated data (attributes and references : see figure below ) of their objects for a lighter first time loading. They are implemented as inner classes within their containers. Data objects  And data fields are filled in when due.\r\n\r\n<center>\r\n<img src=\"http://i40.tinypic.com/99oswy.jpg\" alt=\"Respresentation of objects and their models\" align=\"middle\">\r\n</center>\r\n\r\n##Wiki\r\n\r\n### Generating java code \r\nHaving an ecore model and its genmodel, first you edit the genmodel properties as illustrated by the figure : \r\n\r\n<center>\r\n<img src=\"http://i41.tinypic.com/fdu99z.png\" alt=\"Genmodel properties\" align=\"middle\">\r\n</center>\r\n\r\nTherewith double-click the genModel and the right-click its windows and generate model code as depicted by the later figure :\r\n\r\n<center>\r\n<img src=\"http://i40.tinypic.com/k9ewt5.png\" alt=\"Genmodel properties\" align=\"middle\">\r\n</center>\r\n\r\n###Neo4EMF Resource creation :\r\n`// Create the resourceSet\r\n\t\tResourceSet resourceSet = new ResourceSetImpl();\r\n\t\t// Create an URI with neo4emf as protocol \r\n\t\tURI uri = URI.createURI(\"neo4emf:/./MyFirstNeo4emfResource\");\r\n\t\t// attach this protocol to INeo4emfResourceFactory \r\n\t\tresourceSet.getResourceFactoryRegistry().getProtocolToFactoryMap().put(\"neo4emf\", \r\n\t\t\t\tINeo4emfResourceFactory.eINSTANCE.setRelationshipsMap(reltypes\r\n\t\t\t\t\t\t.ReltypesMappings.getInstance().getMap()));\r\n\t\t// Create the resource\r\n\t\tINeo4emfResource resource = (INeo4emfResource) resourceSet.createResource(uri);\r\n\t\t// Register the package\r\n\t\tEPackage.Registry.INSTANCE.put(MgraphPackage.eINSTANCE.getNsURI(), MgraphPackage.eINSTANCE);` \r\n\r\n###Neo4emf common option :\r\n// TO COME\r\n\r\n### Load a resource :\r\n####Load root objects\r\nto load the root elements of a resource you simply use the load method\r\n`resource.load(null);`\r\n####Load all Instances of some type \r\n`((INeo4emfResource)resource).getAllInstances($Package_class_name$.Literals.$Eclass_name$);`\r\n### Save a resource : \r\nNeo4emf come with a light-weight changelog recorder, so there is no need to add the newly created elements to the resource contents. To save the elements you simply use the save method \r\n`resource.save(null);`\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}